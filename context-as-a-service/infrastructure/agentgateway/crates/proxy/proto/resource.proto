
syntax = "proto3";

package agentgateway.dev.resource;

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";

message Resource {
  oneof kind {
    Bind bind = 1;
    Listener listener = 2;
    Route route = 3;
  }
}

message Bind {
  string name = 1;
  uint32 port = 2;
}

message Listener {
  string name = 1;
  string binding = 2;
  string group = 3;
  string hostname = 4;
  Protocol protocol = 5;
  TLSConfig tls = 6;
}

message TLSConfig {
  bytes cert = 1;
  bytes private_key = 2;
}

enum Protocol {
  UNKNOWN = 0;
  HTTP = 1;
  HTTPS = 2;
  TLS = 3;
  TCP = 4;
  HBONE = 5;
}
message Route {
  string name = 1;
  string listener = 2;
  string group = 3;
  string section = 9;
  repeated string hostnames = 4;
  repeated RouteMatch matches = 5;
  repeated RouteFilter filters = 6;
  repeated RouteBackend backends = 7;
  TrafficPolicy traffic_policy = 8;
}

message TrafficPolicy {
  google.protobuf.Duration backend_request_timeout = 1;
  google.protobuf.Duration request_timeout = 2;
}

message RouteMatch {
  PathMatch path = 1;
  repeated HeaderMatch headers = 2;
  MethodMatch method = 3;
  repeated QueryMatch query_params = 4;
}

message PathMatch {
  oneof kind {
    string exact = 1;
    string path_prefix = 2;
    string regex = 3;
  }
}

message QueryMatch {
  string name = 1;
  oneof value {
    string exact = 2;
    string regex = 3;
  }
}

message MethodMatch {
  string exact = 1;
}

message HeaderMatch {
  string name = 1;

  oneof value {
    string exact = 2;
    string regex = 3;
  }
}

message RouteFilter {
  oneof kind {
    HeaderModifier request_header_modifier = 1;
    HeaderModifier response_header_modifier = 2;
    RequestRedirect request_redirect = 3;
    UrlRewrite url_rewrite = 4;
    RequestMirror request_mirror = 5;
  }
}

message HeaderModifier {
  repeated Header add = 1;
  repeated Header set = 2;
  repeated string remove = 3;
}

message RequestMirror {
  oneof kind {
    string service = 1;
  }
  // 0-100
  double percentage = 2;
  int32 port = 3;
}

message RequestRedirect {
  string scheme = 1;
  string host = 2;
  oneof path {
    string full = 3;
    string prefix = 4;
  }
  uint32 port = 5;
  uint32 status = 6;
}

message UrlRewrite {
  string host = 1;
  oneof path {
    string full = 2;
    string prefix = 3;
  }
}

message Header {
  string name = 1;
  string value = 2;
}

message RouteBackend {
  oneof kind {
    string service = 1;
  }
  int32 weight = 2;
  int32 port = 3;
  repeated RouteFilter filters = 4;
}
