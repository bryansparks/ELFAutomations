#!/usr/bin/env python3
"""
general-team Crew Definition
Generated by Team Factory

Purpose: Executive leadership team with CEO, CTO, CMO, CFO
Framework: CrewAI
Department: general
"""

import sys
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from crewai import Crew, Process, Task
from typing import List, Dict, Any
import logging

# Import team members
from agents import ChiefExecutiveOfficerAgent
from agents import ChiefTechnologyOfficerAgent
from agents import ChiefMarketingOfficerAgent
from agents import ChiefOperatingOfficerAgent
from agents import ChiefFinancialOfficerAgent
from agents import ChiefProductOfficerAgent


class GeneralTeamCrew:
    """Orchestrates the general-team team using CrewAI"""
    
    def __init__(self):
        self.logger = logging.getLogger("general-team.crew")
        
        # Initialize agents
        self.chief_executive_officer = ChiefExecutiveOfficerAgent()
        self.chief_technology_officer = ChiefTechnologyOfficerAgent()
        self.chief_marketing_officer = ChiefMarketingOfficerAgent()
        self.chief_operating_officer = ChiefOperatingOfficerAgent()
        self.chief_financial_officer = ChiefFinancialOfficerAgent()
        self.chief_product_officer = ChiefProductOfficerAgent()
        
        # Create the crew
        self.crew = self._create_crew()
    
    def _create_crew(self) -> Crew:
        """Create and configure the crew"""
        
        agents = [
            self.chief_executive_officer.agent,
            self.chief_technology_officer.agent,
            self.chief_marketing_officer.agent,
            self.chief_operating_officer.agent,
            self.chief_financial_officer.agent,
            self.chief_product_officer.agent,
        ]
        
        # Configure process based on team size and structure
        process = Process.hierarchical
        
        return Crew(
            agents=agents,
            process=process,
            verbose=True,
            memory=True,
            manager_llm=self.chief_executive_officer.llm if process == Process.hierarchical else None,
            function_calling_llm=self.chief_executive_officer.llm,
        )
    
    def create_task(self, description: str, context: Dict[str, Any] = None) -> Task:
        """Create a task for the crew"""
        return Task(
            description=description,
            expected_output="A comprehensive response addressing all aspects of the task",
            context=context or {},
        )
    
    def run(self, task_description: str, context: Dict[str, Any] = None) -> str:
        """Run the crew with a specific task"""
        self.logger.info(f"Starting crew execution: {task_description[:100]}...")
        
        task = self.create_task(task_description, context)
        result = self.crew.kickoff(inputs={"task": task})
        
        self.logger.info("Crew execution completed")
        return result
    
    async def arun(self, task_description: str, context: Dict[str, Any] = None) -> str:
        """Async version of run"""
        # CrewAI doesn't have native async support yet
        # This is a placeholder for future implementation
        return self.run(task_description, context)


# Global instance
_orchestrator_instance = None


def get_orchestrator(tools: Dict[str, List] = None) -> GeneralTeamCrew:
    """Get or create the team orchestrator instance"""
    global _orchestrator_instance
    if _orchestrator_instance is None:
        _orchestrator_instance = GeneralTeamCrew()
    return _orchestrator_instance


if __name__ == "__main__":
    # Example usage
    orchestrator = get_orchestrator()
    
    # Example task
    result = orchestrator.run(
        "Create a comprehensive strategic plan for Q2 2024",
        context={"budget": 100000, "team_size": 6}
    )
    
    print(result)
