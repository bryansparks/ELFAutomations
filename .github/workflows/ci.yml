name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black isort flake8 mypy bandit safety

    - name: Code quality checks
      run: |
        # Format check
        black --check --diff .
        # Import sorting check
        isort --check-only --diff .
        # Linting
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking
      run: |
        mypy agents/ mcp_servers/ utils/ --ignore-missing-imports

    - name: Security scanning
      run: |
        # Dependency vulnerability scanning
        safety check
        # Security linting
        bandit -r agents/ mcp_servers/ utils/ -f json -o bandit-report.json || true

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=agents --cov=mcp_servers --cov=utils --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          coverage.xml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        component: [web, agents]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.component }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        # Update image tags in Kubernetes manifests
        sed -i "s|image: .*-web:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:develop-${{ github.sha }}|g" k8s/staging/web-deployment.yaml
        sed -i "s|image: .*-agents:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agents:develop-${{ github.sha }}|g" k8s/staging/agents-deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/staging/
        
        # Wait for rollout
        kubectl rollout status deployment/virtual-ai-web -n virtual-ai-platform-staging
        kubectl rollout status deployment/virtual-ai-agents -n virtual-ai-platform-staging

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Get service URL
        STAGING_URL=$(kubectl get ingress virtual-ai-ingress -n virtual-ai-platform-staging -o jsonpath='{.spec.rules[0].host}')
        
        # Basic health check
        curl -f http://$STAGING_URL/health || exit 1
        
        # API endpoint check
        curl -f http://$STAGING_URL/api/status || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        # Update image tags in Kubernetes manifests
        sed -i "s|image: .*-web:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:main-${{ github.sha }}|g" k8s/production/web-deployment.yaml
        sed -i "s|image: .*-agents:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agents:main-${{ github.sha }}|g" k8s/production/agents-deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/production/
        
        # Wait for rollout
        kubectl rollout status deployment/virtual-ai-web -n virtual-ai-platform
        kubectl rollout status deployment/virtual-ai-agents -n virtual-ai-platform

    - name: Run production smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Get service URL
        PROD_URL=$(kubectl get ingress virtual-ai-ingress -n virtual-ai-platform -o jsonpath='{.spec.rules[0].host}')
        
        # Basic health check
        curl -f https://$PROD_URL/health || exit 1
        
        # API endpoint check
        curl -f https://$PROD_URL/api/status || exit 1

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        # Add Slack/Discord notification here if needed

    - name: Notify on failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Discord notification here if needed
