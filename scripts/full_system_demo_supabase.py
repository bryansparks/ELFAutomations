#!/usr/bin/env python3
"""
Full System Demo with Supabase Backend

Comprehensive demonstration of the Virtual AI Company Platform with:
- Real AI agents (Chief AI Agent, Sales Agent, Marketing Agent)
- Supabase database backend
- Business tools integration
- End-to-end autonomous workflows
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path

import structlog
from dotenv import load_dotenv

# Import our agents and tools
sys.path.append(str(Path(__file__).parent.parent))

from agents.departments.marketing_agent import MarketingAgent
from agents.departments.sales_agent import SalesAgent
from agents.executive.chief_ai_agent import ChiefAIAgent
from mcp_servers.business_tools import BusinessToolsServer

# Configure logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.dev.ConsoleRenderer(),
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)


async def initialize_business_tools():
    """Initialize and start the business tools MCP server."""
    logger.info("üîß Initializing Business Tools MCP Server...")

    business_tools = BusinessToolsServer()
    await business_tools.start()

    if business_tools.supabase_client:
        logger.info("‚úÖ Business Tools connected to Supabase")
        return business_tools
    else:
        logger.error("‚ùå Failed to connect Business Tools to Supabase")
        return None


async def demonstrate_chief_ai_agent(business_tools):
    """Demonstrate Chief AI Agent strategic planning with real data."""
    logger.info("\nüëë CHIEF AI AGENT DEMONSTRATION")
    logger.info("=" * 50)

    try:
        # Initialize Chief AI Agent
        chief_agent = ChiefAIAgent()
        await chief_agent.initialize()

        logger.info("üß† Chief AI Agent analyzing business performance...")

        # Strategic analysis prompt
        analysis_prompt = """
        As the Chief AI Agent of our Virtual AI Company, perform a comprehensive business analysis:

        1. Review current business metrics and performance
        2. Analyze customer acquisition and lead conversion
        3. Assess task completion rates and operational efficiency
        4. Identify growth opportunities and strategic priorities
        5. Provide specific recommendations for Q1 2024

        Use the available business tools to gather real data from our Supabase database.
        """

        # Execute strategic analysis
        analysis_result = await chief_agent.execute_task(analysis_prompt)

        logger.info("üìä Strategic Analysis Complete:")
        logger.info(f"Analysis: {analysis_result[:800]}...")

        # Generate executive report
        report_prompt = """
        Based on your analysis, create an executive summary report that includes:

        1. Key Performance Indicators (KPIs)
        2. Current business status
        3. Strategic recommendations
        4. Resource allocation priorities
        5. Next quarter objectives

        Format this as a professional executive report.
        """

        report_result = await chief_agent.execute_task(report_prompt)

        # Save the report
        report_file = Path("reports/executive_summary_supabase.md")
        report_file.parent.mkdir(exist_ok=True)

        with open(report_file, "w") as f:
            f.write(f"# Executive Summary - {datetime.now().strftime('%Y-%m-%d')}\n\n")
            f.write("*Generated by Chief AI Agent with Supabase Backend*\n\n")
            f.write(report_result)

        logger.info(f"üìÑ Executive report saved to: {report_file}")

        return True

    except Exception as e:
        logger.error("‚ùå Chief AI Agent demonstration failed", error=str(e))
        return False


async def demonstrate_sales_agent():
    """Demonstrate Sales Agent lead management."""
    logger.info("\nüíº SALES AGENT DEMONSTRATION")
    logger.info("=" * 40)

    try:
        # Initialize Sales Agent
        sales_agent = SalesAgent()
        await sales_agent.initialize()

        logger.info("üéØ Sales Agent processing leads...")

        # Lead qualification prompt
        qualification_prompt = """
        As the Sales Agent, analyze our current leads and:

        1. Review all leads in the database
        2. Identify high-priority prospects (score > 80)
        3. Create follow-up tasks for qualified leads
        4. Generate a sales pipeline report
        5. Recommend next actions for lead conversion

        Use the business tools to access real lead data and create actionable tasks.
        """

        # Execute lead qualification
        qualification_result = await sales_agent.execute_task(qualification_prompt)

        logger.info("üéØ Lead Qualification Complete:")
        logger.info(f"Results: {qualification_result[:600]}...")

        # Sales pipeline analysis
        pipeline_prompt = """
        Create a detailed sales pipeline analysis including:

        1. Lead distribution by source and status
        2. Conversion rate analysis
        3. Revenue projections
        4. Recommended sales strategies
        5. Resource requirements

        Provide specific metrics and actionable insights.
        """

        pipeline_result = await sales_agent.execute_task(pipeline_prompt)

        # Save sales report
        sales_report_file = Path("reports/sales_pipeline_supabase.md")
        sales_report_file.parent.mkdir(exist_ok=True)

        with open(sales_report_file, "w") as f:
            f.write(
                f"# Sales Pipeline Report - {datetime.now().strftime('%Y-%m-%d')}\n\n"
            )
            f.write("*Generated by Sales Agent with Supabase Backend*\n\n")
            f.write(pipeline_result)

        logger.info(f"üìÑ Sales report saved to: {sales_report_file}")

        return True

    except Exception as e:
        logger.error("‚ùå Sales Agent demonstration failed", error=str(e))
        return False


async def demonstrate_marketing_agent():
    """Demonstrate Marketing Agent campaign analysis."""
    logger.info("\nüì¢ MARKETING AGENT DEMONSTRATION")
    logger.info("=" * 45)

    try:
        # Initialize Marketing Agent
        marketing_agent = MarketingAgent()
        await marketing_agent.initialize()

        logger.info("üìà Marketing Agent analyzing campaigns...")

        # Campaign analysis prompt
        campaign_prompt = """
        As the Marketing Agent, analyze our marketing performance:

        1. Review customer acquisition sources
        2. Analyze lead generation effectiveness
        3. Identify top-performing marketing channels
        4. Calculate customer acquisition costs
        5. Recommend campaign optimizations

        Use business tools to gather real customer and lead data for analysis.
        """

        # Execute campaign analysis
        campaign_result = await marketing_agent.execute_task(campaign_prompt)

        logger.info("üìà Campaign Analysis Complete:")
        logger.info(f"Results: {campaign_result[:600]}...")

        # Marketing strategy development
        strategy_prompt = """
        Develop a comprehensive marketing strategy based on your analysis:

        1. Target audience segmentation
        2. Channel optimization recommendations
        3. Budget allocation suggestions
        4. Campaign performance metrics
        5. Growth acceleration tactics

        Provide data-driven recommendations with specific metrics.
        """

        strategy_result = await marketing_agent.execute_task(strategy_prompt)

        # Save marketing report
        marketing_report_file = Path("reports/marketing_strategy_supabase.md")
        marketing_report_file.parent.mkdir(exist_ok=True)

        with open(marketing_report_file, "w") as f:
            f.write(
                f"# Marketing Strategy Report - {datetime.now().strftime('%Y-%m-%d')}\n\n"
            )
            f.write("*Generated by Marketing Agent with Supabase Backend*\n\n")
            f.write(strategy_result)

        logger.info(f"üìÑ Marketing report saved to: {marketing_report_file}")

        return True

    except Exception as e:
        logger.error("‚ùå Marketing Agent demonstration failed", error=str(e))
        return False


async def demonstrate_cross_department_collaboration():
    """Demonstrate cross-department agent collaboration."""
    logger.info("\nü§ù CROSS-DEPARTMENT COLLABORATION DEMO")
    logger.info("=" * 50)

    try:
        # Initialize all agents
        chief_agent = ChiefAIAgent()
        sales_agent = SalesAgent()
        marketing_agent = MarketingAgent()

        await chief_agent.initialize()
        await sales_agent.initialize()
        await marketing_agent.initialize()

        logger.info("üéØ Simulating cross-department strategic session...")

        # Collaborative planning prompt
        collaboration_prompt = """
        Coordinate a cross-department strategic planning session:

        CHIEF AI AGENT: Provide overall business direction and priorities
        SALES AGENT: Share pipeline insights and revenue projections
        MARKETING AGENT: Present campaign performance and growth opportunities

        Work together to:
        1. Align on Q1 2024 objectives
        2. Identify resource allocation needs
        3. Create integrated action plans
        4. Establish success metrics
        5. Define collaboration protocols

        Generate a unified strategic plan with specific deliverables for each department.
        """

        # Execute collaborative planning (simulated)
        logger.info("üëë Chief AI Agent setting strategic direction...")
        chief_direction = await chief_agent.execute_task(
            "Set strategic priorities for Q1 2024 based on current business performance. "
            "Focus on growth, efficiency, and market expansion opportunities."
        )

        logger.info("üíº Sales Agent providing pipeline insights...")
        sales_insights = await sales_agent.execute_task(
            "Analyze current sales pipeline and provide revenue projections for Q1 2024. "
            "Identify key opportunities and resource needs for achieving targets."
        )

        logger.info("üì¢ Marketing Agent sharing campaign analysis...")
        marketing_insights = await marketing_agent.execute_task(
            "Review marketing campaign performance and recommend strategies for Q1 2024. "
            "Focus on customer acquisition and lead generation optimization."
        )

        # Create collaborative report
        collaboration_report = f"""
# Cross-Department Strategic Planning Session
*Generated by Virtual AI Company Platform - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*

## Strategic Direction (Chief AI Agent)
{chief_direction[:500]}...

## Sales Pipeline Insights (Sales Agent)
{sales_insights[:500]}...

## Marketing Campaign Analysis (Marketing Agent)
{marketing_insights[:500]}...

## Integrated Action Plan
- **Objective**: Achieve 25% growth in Q1 2024
- **Sales Target**: Increase conversion rate by 15%
- **Marketing Goal**: Reduce customer acquisition cost by 20%
- **Operational Focus**: Improve task completion efficiency by 30%

## Success Metrics
- Monthly revenue growth tracking
- Lead conversion rate monitoring
- Customer satisfaction scores
- Agent performance analytics

*This report demonstrates autonomous AI agent collaboration with real Supabase data integration.*
"""

        # Save collaboration report
        collab_report_file = Path("reports/cross_department_collaboration_supabase.md")
        collab_report_file.parent.mkdir(exist_ok=True)

        with open(collab_report_file, "w") as f:
            f.write(collaboration_report)

        logger.info(f"üìÑ Collaboration report saved to: {collab_report_file}")

        return True

    except Exception as e:
        logger.error("‚ùå Cross-department collaboration demo failed", error=str(e))
        return False


async def main():
    """Main demonstration function."""
    logger.info("üöÄ VIRTUAL AI COMPANY PLATFORM - FULL SYSTEM DEMO")
    logger.info("üóÑÔ∏è  Powered by Supabase Backend")
    logger.info("=" * 60)

    # Load environment
    load_dotenv()

    # Verify Supabase configuration
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_ANON_KEY")

    if not supabase_url or not supabase_key:
        logger.error("‚ùå Supabase configuration missing")
        return 1

    logger.info(f"‚úÖ Supabase URL: {supabase_url}")
    logger.info(f"‚úÖ Supabase Key: {'*' * 8}...{supabase_key[-4:]}")

    # Initialize business tools
    business_tools = await initialize_business_tools()
    if not business_tools:
        logger.error("‚ùå Failed to initialize business tools")
        return 1

    # Run demonstrations
    results = []

    # Chief AI Agent demo
    chief_result = await demonstrate_chief_ai_agent(business_tools)
    results.append(("Chief AI Agent", chief_result))

    # Sales Agent demo
    sales_result = await demonstrate_sales_agent()
    results.append(("Sales Agent", sales_result))

    # Marketing Agent demo
    marketing_result = await demonstrate_marketing_agent()
    results.append(("Marketing Agent", marketing_result))

    # Cross-department collaboration
    collab_result = await demonstrate_cross_department_collaboration()
    results.append(("Cross-Department Collaboration", collab_result))

    # Summary
    logger.info("\nüìã DEMONSTRATION SUMMARY")
    logger.info("=" * 30)

    success_count = 0
    for demo_name, success in results:
        if success:
            logger.info(f"‚úÖ {demo_name}: SUCCESS")
            success_count += 1
        else:
            logger.error(f"‚ùå {demo_name}: FAILED")

    logger.info(
        f"\nüéØ Overall Success Rate: {success_count}/{len(results)} ({success_count/len(results)*100:.1f}%)"
    )

    if success_count == len(results):
        logger.info("\nüéâ FULL SYSTEM DEMO COMPLETED SUCCESSFULLY!")
        logger.info(
            "The Virtual AI Company Platform is fully operational with Supabase backend."
        )
        logger.info("\nüìä Generated Reports:")
        logger.info("  - reports/executive_summary_supabase.md")
        logger.info("  - reports/sales_pipeline_supabase.md")
        logger.info("  - reports/marketing_strategy_supabase.md")
        logger.info("  - reports/cross_department_collaboration_supabase.md")
        logger.info("\nüöÄ Ready for production deployment!")
        return 0
    else:
        logger.error("\n‚ö†Ô∏è Some demonstrations failed. Review logs for details.")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
