"""
Executive team patch generator.
"""

import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

from ..models import TeamSpecification


class ExecutivePatchGenerator:
    """Generates patches to update executive teams with new subordinates."""

    def __init__(self):
        """Initialize patch generator."""
        self.logger = logging.getLogger(__name__)

    def generate_patch(self, team_spec: TeamSpecification) -> Dict[str, Any]:
        """
        Generate a patch file to update executive team.

        Args:
            team_spec: Team specification

        Returns:
            Patch generation result
        """
        if not team_spec.reporting_to:
            return {
                "success": False,
                "error": "No reporting_to specified",
            }

        try:
            # Generate patch filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            patch_filename = f"add_{team_spec.name}_{timestamp}.yaml"
            patch_path = Path("patches") / patch_filename

            # Ensure patches directory exists
            patch_path.parent.mkdir(exist_ok=True)

            # Generate patch content
            patch_content = self._generate_patch_content(team_spec)

            # Write patch file
            with open(patch_path, "w") as f:
                f.write(patch_content)

            self.logger.info(f"Generated executive patch: {patch_path}")

            return {
                "success": True,
                "patch_file": str(patch_path),
                "executive": team_spec.reporting_to,
            }

        except Exception as e:
            self.logger.error(f"Failed to generate patch: {str(e)}")
            return {
                "success": False,
                "error": str(e),
            }

    def _generate_patch_content(self, team_spec: TeamSpecification) -> str:
        """Generate patch file content."""
        executive_role = team_spec.reporting_to.lower()

        return f"""# Patch to add {team_spec.name} to {executive_role}'s managed teams
# Generated by team-factory on {datetime.now().isoformat()}
#
# Apply this patch to update the executive team's configuration
# to include the new subordinate team.

patch:
  target: teams/executive-team/agents/{executive_role}.py
  operations:
    - type: add_managed_team
      team_name: {team_spec.name}
      team_purpose: {team_spec.purpose}

    - type: update_imports
      add:
        - from teams.{team_spec.name.replace('-', '_')}.crew import get_orchestrator as get_{team_spec.name.replace('-', '_')}_orchestrator

    - type: update_capabilities
      add:
        - Manage {team_spec.name}
        - Delegate to {team_spec.name}
        - Monitor {team_spec.name} progress

# Manual steps:
# 1. Review the generated patch
# 2. Apply to executive team configuration
# 3. Rebuild and redeploy executive team
# 4. Verify A2A communication between teams

team_details:
  name: {team_spec.name}
  department: {team_spec.department}
  framework: {team_spec.framework}
  manager: {next((m.role for m in team_spec.members if m.is_manager), 'Team Manager')}
  size: {len(team_spec.members)}
  purpose: {team_spec.purpose}
"""
