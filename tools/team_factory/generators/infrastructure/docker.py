"""
Docker file generator for team containerization.
"""

from pathlib import Path
from typing import Any, Dict

from ...models import TeamSpecification
from ..base import BaseGenerator


class DockerfileGenerator(BaseGenerator):
    """Generates Dockerfile for team deployment."""

    def generate(self, team_spec: TeamSpecification) -> Dict[str, Any]:
        """
        Generate Dockerfile.

        Args:
            team_spec: Team specification

        Returns:
            Generation results
        """
        team_dir = Path(team_spec.name)
        dockerfile_path = team_dir / "Dockerfile"
        
        # Generate Dockerfile content
        dockerfile_content = self._generate_dockerfile_content(team_spec)
        
        # Write file
        with open(dockerfile_path, "w") as f:
            f.write(dockerfile_content)
        
        return {
            "generated_files": [str(dockerfile_path)],
            "errors": []
        }
    
    def _generate_dockerfile_content(self, team_spec: TeamSpecification) -> str:
        """Generate Dockerfile content."""
        return f'''# Multi-stage Dockerfile for {team_spec.name}
# Generated by Team Factory

# Builder stage
FROM python:3.11-slim AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \\
    gcc \\
    g++ \\
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .

# Install Python dependencies
RUN pip install --user --no-cache-dir -r requirements.txt

# Runtime stage
FROM python:3.11-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies from builder
COPY --from=builder /root/.local /root/.local

# Make sure scripts in .local are usable
ENV PATH=/root/.local/bin:$PATH

# Copy application code
COPY . .

# Create non-root user
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV TEAM_NAME={team_spec.name}
ENV FRAMEWORK={team_spec.framework}

# Expose port for API
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:8000/health || exit 1

# Default command (can be overridden)
CMD ["python", "team_server.py"]
'''