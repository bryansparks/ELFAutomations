"""
Simple LangGraph agent generator.
"""

from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

from ...models import TeamMember, TeamSpecification
from ..base import BaseGenerator


class LangGraphAgentGenerator(BaseGenerator):
    """Generates LangGraph agent files."""

    def generate(self, team_spec: TeamSpecification) -> Dict[str, Any]:
        """
        Generate LangGraph agent files.

        Args:
            team_spec: Team specification

        Returns:
            Generation results
        """
        generated_files = []
        errors = []
        
        # Create agents directory
        team_dir = Path(team_spec.name)
        agents_dir = team_dir / "agents"
        agents_dir.mkdir(parents=True, exist_ok=True)
        
        # Generate __init__.py
        init_path = agents_dir / "__init__.py"
        with open(init_path, "w") as f:
            f.write(self._generate_init_content(team_spec))
        generated_files.append(str(init_path))
        
        # Generate individual agent files
        for member in team_spec.members:
            agent_file = self._generate_agent_file(member, team_spec, agents_dir)
            generated_files.append(str(agent_file))
        
        return {
            "generated_files": generated_files,
            "errors": errors,
        }
    
    def _generate_init_content(self, team_spec: TeamSpecification) -> str:
        """Generate __init__.py content."""
        imports = []
        exports = []
        
        for member in team_spec.members:
            class_name = member.role.replace(" ", "") + "Agent"
            filename = member.filename.replace(".py", "")
            imports.append(f"from .{filename} import {class_name}")
            exports.append(f'"{class_name}"')
        
        return "\n".join(imports) + "\n\n__all__ = [" + ", ".join(exports) + "]\n"
    
    def _generate_agent_file(
        self, member: TeamMember, team_spec: TeamSpecification, agents_dir: Path
    ) -> Path:
        """Generate individual agent file."""
        agent_content = self._generate_agent_content(member, team_spec)
        
        agent_file = agents_dir / member.filename
        with open(agent_file, "w") as f:
            f.write(agent_content)
        
        return agent_file
    
    def _generate_agent_content(self, member: TeamMember, team_spec: TeamSpecification) -> str:
        """Generate agent implementation content - simplified version."""
        class_name = member.role.replace(" ", "") + "Agent"
        
        # Create a simple template that works
        return f'''#!/usr/bin/env python3
"""
{member.role} Agent for {team_spec.name}
Generated by Team Factory

LangGraph-based agent implementation.
"""

import logging
from typing import Optional, Dict, Any
from datetime import datetime
from uuid import uuid4

from langchain_core.messages import BaseMessage, HumanMessage, SystemMessage
from langgraph.graph import StateGraph, END
from agents.langgraph_base import LangGraphBaseAgent


class {class_name}(LangGraphBaseAgent):
    """
    {member.role} implementation using LangGraph

    Responsibilities:
{chr(10).join(f"    - {r}" for r in member.responsibilities)}

    Skills: {', '.join(member.skills)}
    """

    def __init__(self,
                 agent_id: Optional[str] = None,
                 gateway_url: str = "http://agentgateway-service:3000",
                 gateway_api_key: Optional[str] = None):

        # Generate unique agent ID if not provided
        if not agent_id:
            agent_id = f"{team_spec.name}-{member.role.lower().replace(' ', '-')}-{{uuid4().hex[:8]}}"

        super().__init__(
            agent_id=agent_id,
            name="{member.role}",
            department="{team_spec.department}",
            system_prompt="""{self._generate_system_prompt(member, team_spec)}""",
            gateway_url=gateway_url,
            gateway_api_key=gateway_api_key
        )

        self.logger = logging.getLogger(f"{team_spec.name}.{member.role}")
        self.role = "{member.role}"
        
        # Initialize custom workflow
        self._initialize_custom_workflow()

    def _initialize_custom_workflow(self):
        """Initialize the custom workflow for this agent"""
        # Simple workflow for now
        workflow = StateGraph(dict)
        
        # Add basic nodes
        workflow.add_node("process", self._process_node)
        
        # Set entry point
        workflow.set_entry_point("process")
        
        # Add edge to end
        workflow.add_edge("process", END)
        
        # Compile the graph
        self.graph = workflow
        self.compiled_graph = workflow.compile()
        
        self.logger.info("Custom workflow initialized for {member.role}")
    
    async def _process_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Process incoming requests"""
        self.logger.info("Processing request in {member.role}")
        
        # Add implementation here
        state["processed"] = True
        state["agent"] = self.role
        state["timestamp"] = datetime.utcnow().isoformat()
        
        return state
'''
    
    def _generate_system_prompt(self, member: TeamMember, team_spec: TeamSpecification) -> str:
        """Generate system prompt for the agent."""
        prompt = f"You are the {member.role} for {team_spec.name}. "
        prompt += f"Your responsibilities include: {', '.join(member.responsibilities)}. "
        
        if member.personality:
            prompt += f"You have a {member.personality} personality. "
        
        if member.is_manager:
            prompt += "As a manager, you coordinate team efforts and make key decisions. "
        
        return prompt