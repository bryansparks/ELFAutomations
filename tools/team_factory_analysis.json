{
  "statistics": {
    "total_lines": 4714,
    "total_characters": 172925,
    "blank_lines": 767,
    "comment_lines": 389,
    "function_count": 16,
    "class_count": 8
  },
  "functions": [
    {
      "name": "get_orchestrator",
      "line": 2106,
      "params": "tools: Optional[Dict[str, List]] = None",
      "docstring": "Get or create the team orchestrator instance",
      "is_async": false
    },
    {
      "name": "create_deployable_team",
      "line": 2210,
      "params": "",
      "docstring": "Create a deployable version of the team",
      "is_async": false
    },
    {
      "name": "create_team_server",
      "line": 2236,
      "params": "team_dir: Path",
      "docstring": "Create the main server that runs the team",
      "is_async": false
    },
    {
      "name": "create_dockerfile",
      "line": 2340,
      "params": "team_dir: Path",
      "docstring": "",
      "is_async": false
    },
    {
      "name": "create_requirements",
      "line": 2381,
      "params": "team_dir: Path",
      "docstring": "",
      "is_async": false
    },
    {
      "name": "create_health_check",
      "line": 2415,
      "params": "team_dir: Path",
      "docstring": "",
      "is_async": false
    },
    {
      "name": "get_workflow",
      "line": 3607,
      "params": "checkpoint_url: Optional[str] = None",
      "docstring": "Get or create the team workflow instance",
      "is_async": false
    },
    {
      "name": "create_deployable_team",
      "line": 3649,
      "params": "",
      "docstring": "Create a deployable version of the team",
      "is_async": false
    },
    {
      "name": "create_team_server",
      "line": 3675,
      "params": "team_dir: Path",
      "docstring": "Create the main server that runs the LangGraph team",
      "is_async": false
    },
    {
      "name": "create_dockerfile",
      "line": 3784,
      "params": "team_dir: Path",
      "docstring": "",
      "is_async": false
    },
    {
      "name": "create_requirements",
      "line": 3826,
      "params": "team_dir: Path",
      "docstring": "",
      "is_async": false
    },
    {
      "name": "create_health_check",
      "line": 3863,
      "params": "team_dir: Path",
      "docstring": "",
      "is_async": false
    },
    {
      "name": "main",
      "line": 4684,
      "params": "",
      "docstring": "Main entry point",
      "is_async": false
    }
  ],
  "classes": [
    {
      "name": "TeamMember",
      "line": 58,
      "base_classes": "",
      "methods": [],
      "is_dataclass": true
    },
    {
      "name": "SubTeamRecommendation",
      "line": 77,
      "base_classes": "",
      "methods": [],
      "is_dataclass": true
    },
    {
      "name": "TeamSpecification",
      "line": 87,
      "base_classes": "",
      "methods": [],
      "is_dataclass": true
    },
    {
      "name": "TeamFactory",
      "line": 109,
      "base_classes": "",
      "methods": [],
      "is_dataclass": false
    },
    {
      "name": "MemoryAwareCrewAIAgent",
      "line": 1653,
      "base_classes": "MemoryAgentMixin",
      "methods": [],
      "is_dataclass": false
    },
    {
      "name": "TeamState",
      "line": 3207,
      "base_classes": "TypedDict",
      "methods": [],
      "is_dataclass": false
    },
    {
      "name": "TaskState",
      "line": 3220,
      "base_classes": "TypedDict",
      "methods": [],
      "is_dataclass": false
    },
    {
      "name": "CommunicationState",
      "line": 3233,
      "base_classes": "TypedDict",
      "methods": [],
      "is_dataclass": false
    }
  ],
  "constants": [
    {
      "name": "AGENT_GATEWAY_URL",
      "line": 4006,
      "value_preview": "http://agentgateway:3003"
    },
    {
      "name": "CHECKPOINT_DATABASE_URL",
      "line": 4009,
      "value_preview": "postgresql://user:pass@host:5432/dbname"
    },
    {
      "name": "SUPABASE_URL",
      "line": 4012,
      "value_preview": "your-supabase-url"
    },
    {
      "name": "SUPABASE_KEY",
      "line": 4013,
      "value_preview": "your-supabase-key"
    }
  ],
  "imports": [
    "from agents import (",
    "from agents.distributed.a2a.client import A2AClientManager",
    "from agents.distributed.a2a.messages import TaskRequest, TaskResponse",
    "from agents.distributed.a2a.server import A2AServer",
    "from agents.langgraph_base import LangGraphBaseAgent, LangGraphAgentState",
    "from crew import {crew_class}",
    "from crewai import Agent",
    "from crewai import Agent, Task, Crew, Process",
    "from crewai import Crew, Process, Task",
    "from crewai import Task",
    "from dataclasses import dataclass, field",
    "from datetime import datetime",
    "from elf_automations.shared.a2a import A2AClient",
    "from elf_automations.shared.memory import TeamMemory, LearningSystem, ContinuousImprovementLoop",
    "from elf_automations.shared.memory import TeamMemory, LearningSystem, MemoryAgentMixin, with_memory",
    "from elf_automations.shared.utils import LLMFactory",
    "from fastapi import FastAPI, HTTPException",
    "from fastapi.responses import JSONResponse",
    "from langchain_anthropic import ChatAnthropic",
    "from langchain_core.messages import BaseMessage",
    "from langchain_core.messages import BaseMessage, HumanMessage, AIMessage, SystemMessage",
    "from langchain_core.messages import HumanMessage, SystemMessage",
    "from langchain_openai import ChatOpenAI",
    "from langgraph.checkpoint.memory import MemorySaver",
    "from langgraph.checkpoint.postgres import PostgresSaver",
    "from langgraph.graph import StateGraph, END",
    "from langgraph.graph.message import add_messages",
    "from pathlib import Path",
    "from rich.console import Console",
    "from rich.markdown import Markdown",
    "from rich.panel import Panel",
    "from rich.prompt import Confirm, Prompt",
    "from rich.table import Table",
    "from tools.conversation_logging_system import ConversationLogger, MessageType",
    "from typing import Dict, Any",
    "from typing import Dict, Any, List, Optional",
    "from typing import Dict, List, Optional, Tuple",
    "from typing import List",
    "from typing import List, Dict, Any",
    "from typing import List, Dict, Any, Optional",
    "from typing import Optional, Any, Union, List, Dict",
    "from typing import Optional, List, Dict, Any, TypedDict, Annotated",
    "from typing import TypedDict, List, Dict, Any, Optional, Annotated",
    "from uuid import uuid4",
    "from workflows.state_definitions import TeamState, TaskState",
    "from workflows.team_workflow import get_workflow",
    "import argparse",
    "import asyncio",
    "import json",
    "import json\"\"\"",
    "import logging",
    "import openai",
    "import os",
    "import re",
    "import requests",
    "import shutil",
    "import sys",
    "import uvicorn",
    "import yaml"
  ],
  "generated_files": [
    "/logs",
    "add_{new_team_name}_{timestamp}.yaml",
    "{team_spec.name}.py",
    "{team_spec.name}_context.yaml"
  ],
  "template_blocks": [
    {
      "variable": "analysis_prompt",
      "line": 470,
      "size": 708,
      "is_fstring": true,
      "preview": "\n        Analyze this team description and suggest a team composition:\n\n        Description: {description}\n        Framework: {framework}\n\n        Guidelines:\n        - Team size should be 3-7 members..."
    },
    {
      "variable": "a2a_imports",
      "line": 1561,
      "size": 171,
      "is_fstring": false,
      "preview": "\nfrom agents.distributed.a2a.client import A2AClientManager\nfrom agents.distributed.a2a.messages import TaskRequest, TaskResponse\nfrom datetime import datetime\nimport json"
    },
    {
      "variable": "a2a_init",
      "line": 1566,
      "size": 159,
      "is_fstring": false,
      "preview": "\n        # Initialize A2A client for inter-team communication\n        self.a2a_client = None\n        if self.manages_teams:\n            self._init_a2a_client()"
    },
    {
      "variable": "agent_content",
      "line": 1588,
      "size": 7017,
      "is_fstring": true,
      "preview": "\"\"\"\n{member.role} Agent\n\"\"\"\n\nfrom crewai import Agent\nfrom typing import Optional, Any, Union, List, Dict\nfrom langchain_openai import ChatOpenAI\nfrom langchain_anthropic import ChatAnthropic\nfrom elf..."
    },
    {
      "variable": "crew_content",
      "line": 1911,
      "size": 3458,
      "is_fstring": false,
      "preview": "#!/usr/bin/env python3\n\"\"\"\n{team_spec.name} Crew Definition\nGenerated by Team Factory\n\nPurpose: {team_spec.purpose}\nFramework: CrewAI\nDepartment: {team_spec.department}\n\"\"\"\n\nimport sys\nfrom pathlib im..."
    },
    {
      "variable": "_orchestrator_instance",
      "line": 2110,
      "size": 877,
      "is_fstring": false,
      "preview": "\n            + team_spec.name.replace(\"-\", \" \").title().replace(\" \", \"\")\n            + \"\"\"Crew(tools=tools)\n    return _orchestrator_instance\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    orche..."
    },
    {
      "variable": "description",
      "line": 2150,
      "size": 217,
      "is_fstring": false,
      "preview": "\n        Develop a comprehensive strategic plan for the next quarter.\n        Consider market conditions, resource allocation, and team capabilities.\n        Provide specific recommendations and actio..."
    },
    {
      "variable": "description",
      "line": 2163,
      "size": 216,
      "is_fstring": false,
      "preview": "\n        Generate a comprehensive status report covering:\n        1. Current progress on key initiatives\n        2. Challenges and blockers\n        3. Resource needs\n        4. Recommendations for nex..."
    },
    {
      "variable": "script_content",
      "line": 2193,
      "size": 6403,
      "is_fstring": false,
      "preview": "#!/usr/bin/env python3\n\"\"\"\nMake Deployable Team Script\nCreates a containerized version of the team that can run as a single K8s pod\n\nThis script:\n1. Creates a team_server.py that wraps the crew with A..."
    },
    {
      "variable": "implementation",
      "line": 2453,
      "size": 819,
      "is_fstring": false,
      "preview": "#!/usr/bin/env python3\n\"\"\"\n{team_spec.name} - CrewAI Implementation\nGenerated by Team Factory\n\nPurpose: {team_spec.purpose}\n\"\"\"\n\nfrom crewai import Agent, Task, Crew, Process\nfrom typing import List, ..."
    },
    {
      "variable": "a2a_imports",
      "line": 2631,
      "size": 171,
      "is_fstring": false,
      "preview": "\nfrom agents.distributed.a2a.client import A2AClientManager\nfrom agents.distributed.a2a.messages import TaskRequest, TaskResponse\nfrom datetime import datetime\nimport json"
    },
    {
      "variable": "content",
      "line": 2901,
      "size": 400,
      "is_fstring": true,
      "preview": "\n        Analyze this task and determine the best approach:\n\n        Task: {{state.get('current_task', 'No specific task')}}\n        Context: {{state.get('task_context', {{}})}}\n        {memory_contex..."
    },
    {
      "variable": "content",
      "line": 2936,
      "size": 144,
      "is_fstring": false,
      "preview": "\n        Based on your analysis, create a detailed execution plan.\n        Include specific steps, dependencies, and expected outcomes.\n        "
    },
    {
      "variable": "content",
      "line": 3007,
      "size": 139,
      "is_fstring": false,
      "preview": "\n        Execute the planned approach. Use available tools as needed.\n        Provide detailed results and any issues encountered.\n        "
    },
    {
      "variable": "content",
      "line": 3028,
      "size": 209,
      "is_fstring": false,
      "preview": "\n        Review the execution results:\n        1. Were the objectives met?\n        2. Are there any issues or gaps?\n        3. What are the key outcomes?\n        4. Any recommendations for next steps?..."
    },
    {
      "variable": "state_content",
      "line": 3196,
      "size": 1298,
      "is_fstring": false,
      "preview": "#!/usr/bin/env python3\n\"\"\"\nState definitions for {team_spec.name}\n\"\"\"\n\nfrom typing import TypedDict, List, Dict, Any, Optional, Annotated\nfrom datetime import datetime\nfrom langchain_core.messages imp..."
    },
    {
      "variable": "workflow_content",
      "line": 3257,
      "size": 2643,
      "is_fstring": false,
      "preview": "#!/usr/bin/env python3\n\"\"\"\n{team_spec.name} Workflow Orchestrator\nLangGraph-based team coordination\n\"\"\"\n\nimport asyncio\nimport logging\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typin..."
    },
    {
      "variable": "content",
      "line": 3425,
      "size": 344,
      "is_fstring": true,
      "preview": "\n        This is the {self.team_name} with the following members:\n{chr(10).join(f\"        - {member.role}: {', '.join(member.responsibilities[:2])}\" for member in team_spec.members)}\n\n        Team com..."
    },
    {
      "variable": "_workflow_instance",
      "line": 3611,
      "size": 800,
      "is_fstring": false,
      "preview": "\n            + team_spec.name.replace(\"-\", \" \").title().replace(\" \", \"\")\n            + \"\"\"Workflow(checkpoint_url=checkpoint_url)\n    return _workflow_instance\n\n\nif __name__ == \"__main__\":\n    # Examp..."
    },
    {
      "variable": "server_content",
      "line": 3677,
      "size": 5861,
      "is_fstring": false,
      "preview": "#!/usr/bin/env python3\n\\\"\\\"\\\"\nTeam Server - Runs the LangGraph team with A2A protocol endpoint\n\\\"\\\"\\\"\n\nimport asyncio\nimport logging\nimport os\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.r..."
    },
    {
      "variable": "readme_content",
      "line": 3901,
      "size": 446,
      "is_fstring": true,
      "preview": "# {team_spec.name.replace(\"-\", \" \").title()}\n\n## Overview\n{team_spec.purpose}\n\n**Framework**: LangGraph (State Machine-based)\n**Department**: {team_spec.department}\n**Workflow Type**: {\"Hierarchical S..."
    },
    {
      "variable": "doc_content",
      "line": 4265,
      "size": 348,
      "is_fstring": true,
      "preview": "# {team_spec.name}\n\n## Overview\n**Framework:** {team_spec.framework}\n**Department:** {team_spec.department}\n**Created:** {datetime.now().strftime(\"%Y-%m-%d\")}\n\n### Purpose\n{team_spec.purpose}\n\n### Ori..."
    },
    {
      "variable": "readme_content",
      "line": 4351,
      "size": 371,
      "is_fstring": true,
      "preview": "# {team_spec.name.replace(\"-\", \" \").title()}\n\n## Overview\n{team_spec.purpose}\n\n**Framework**: {team_spec.framework}\n**Department**: {team_spec.department}\n**Process Type**: {\"Hierarchical\" if len(team..."
    },
    {
      "variable": "patch_content",
      "line": 4656,
      "size": 523,
      "is_fstring": true,
      "preview": "# Patch to add {new_team_name} to {executive_role}'s managed teams\n# Generated by team-factory on {datetime.now().isoformat()}\n#\n# Apply this patch to update the executive team's configuration\n# to in..."
    }
  ],
  "integrations": [
    "a2a",
    "docker",
    "kubernetes",
    "llm_providers",
    "logging",
    "mcp",
    "monitoring",
    "prometheus",
    "qdrant",
    "supabase"
  ],
  "ui_components": [
    "Confirm",
    "Confirm.ask",
    "Console",
    "Markdown",
    "Panel",
    "Prompt",
    "Prompt.ask",
    "Table",
    "console.w+"
  ],
  "validation_patterns": [
    "directory_check",
    "framework_check",
    "manager_check",
    "name_validation",
    "skeptic_rule",
    "team_size"
  ],
  "llm_configurations": {
    "providers": [
      "Anthropic",
      "OpenAI"
    ],
    "models": [
      "claude-3-haiku-20240307",
      "claude-3-opus-20240229",
      "claude-3-sonnet-20240229",
      "gpt-3.5-turbo",
      "gpt-4",
      "gpt-4-turbo-preview"
    ],
    "fallback_mentioned": true
  },
  "personality_traits": [
    "analyzer",
    "collaborator",
    "detail-oriented",
    "innovator",
    "optimist",
    "pragmatist",
    "skeptic"
  ],
  "department_mappings": {}
}
