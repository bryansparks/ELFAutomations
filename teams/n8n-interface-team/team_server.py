#!/usr/bin/env python3
"""
Team Server - Runs the CrewAI team with A2A protocol endpoint
Generated by Team Factory
"""

import asyncio
import logging
import os
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Dict, Any, List, Optional
from datetime import datetime
import uvicorn

# Team imports
from crew import get_orchestrator
from agents.distributed.a2a.server import A2AServer
from agents.distributed.a2a.messages import TaskRequest, TaskResponse


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="n8n-interface-team Team API",
    description="A2A-enabled CrewAI team for Enable seamless integration between AI teams and n8n automation workflows",
    version="1.0.0"
)

# Initialize team orchestrator
orchestrator = None
a2a_server = None


class TaskRequestModel(BaseModel):
    """Model for incoming task requests"""
    from_agent: str
    to_agent: str
    task_type: str
    task_description: str
    context: Dict[str, Any] = {}
    timeout: int = 3600  # Default 1 hour


class HealthResponse(BaseModel):
    """Health check response model"""
    status: str
    team_name: str = "n8n-interface-team"
    framework: str = "CrewAI"
    department: str = "infrastructure"
    timestamp: str
    agents: List[str] = ['Manager with A2A', 'Validation Specialist', 'Monitoring Specialist', 'Resilience Engineer', 'Registry Specialist']


@app.on_event("startup")
async def startup_event():
    """Initialize team on startup"""
    global orchestrator, a2a_server

    logger.info("Starting n8n-interface-team team server...")

    # Initialize orchestrator
    orchestrator = get_orchestrator()
    logger.info("Team orchestrator initialized")

    # Initialize A2A server
    a2a_server = A2AServer(
        agent_id="n8n-interface-team-manager",
        capabilities=[
            "Enable seamless integration between AI teams and n8n automation workflows",
            "Task execution",
            "Status reporting",
            "Team coordination"
        ]
    )
    await a2a_server.start()
    logger.info("A2A server initialized")

    logger.info("n8n-interface-team team server started successfully")


@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown"""
    global a2a_server

    logger.info("Shutting down n8n-interface-team team server...")

    if a2a_server:
        await a2a_server.stop()

    logger.info("Shutdown complete")


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Health check endpoint"""
    return HealthResponse(
        status="healthy",
        timestamp=datetime.utcnow().isoformat()
    )


@app.post("/task")
async def handle_task(request: TaskRequestModel):
    """Handle incoming A2A task requests"""
    logger.info(f"Received task from {request.from_agent}: {request.task_description[:100]}...")

    try:
        # Create task request
        task_request = TaskRequest(
            from_agent=request.from_agent,
            to_agent=request.to_agent,
            task_type=request.task_type,
            task_description=request.task_description,
            context=request.context,
            timeout=request.timeout
        )

        # Execute task using orchestrator
        if "CrewAI" == "CrewAI":
            result = orchestrator.run(
                task_description=request.task_description,
                context=request.context
            )
        else:
            # LangGraph async execution
            result = await orchestrator.run(
                objective=request.task_description,
                context=request.context
            )

        # Create response
        response = TaskResponse(
            request_id=task_request.request_id,
            from_agent=request.to_agent,
            to_agent=request.from_agent,
            status="completed",
            result=str(result),
            context={
                "execution_time": datetime.utcnow().isoformat(),
                "team_name": "n8n-interface-team"
            }
        )

        logger.info(f"Task completed successfully for {request.from_agent}")
        return response.dict()

    except Exception as e:
        logger.error(f"Error executing task: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/capabilities")
async def get_capabilities():
    """Return team capabilities"""
    return {
        "team_name": "n8n-interface-team",
        "department": "infrastructure",
        "framework": "CrewAI",
        "purpose": "Enable seamless integration between AI teams and n8n automation workflows",
        "agents": [
            {
                "role": agent,
                "is_manager": agent == "Manager with A2A"
            }
            for agent in ['Manager with A2A', 'Validation Specialist', 'Monitoring Specialist', 'Resilience Engineer', 'Registry Specialist']
        ],
        "capabilities": [
            "Enable seamless integration between AI teams and n8n automation workflows",
            "Task execution via CrewAI",
            "A2A protocol support",
            "Status reporting",
            "Health monitoring"
        ]
    }


@app.get("/status")
async def get_status():
    """Get current team status"""
    return {
        "status": "operational",
        "team_name": "n8n-interface-team",
        "active_tasks": 0,  # Would track actual tasks in production
        "last_activity": datetime.utcnow().isoformat(),
        "agents_status": {
            agent: "ready" for agent in ['Manager with A2A', 'Validation Specialist', 'Monitoring Specialist', 'Resilience Engineer', 'Registry Specialist']
        }
    }


if __name__ == "__main__":
    # Run the server
    port = int(os.getenv("PORT", "8000"))
    host = os.getenv("HOST", "0.0.0.0")

    logger.info(f"Starting server on {host}:{port}")

    uvicorn.run(
        app,
        host=host,
        port=port,
        log_level="info",
        access_log=True
    )
